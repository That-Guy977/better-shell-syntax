- source: aaa
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: (
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '='
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '-h'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: '|'
  scopesBegin:
    - keyword.operator.pipe
- source: '|'
  scopesEnd:
    - keyword.operator.pipe
- source: '['
  scopesBegin:
    - meta.statement
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '='
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '--help'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: printf
  scopesBegin:
    - meta.statement
    - meta.command
  scopes:
    - meta.statement.command.name
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '%s'
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: help
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.command
    - meta.argument
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: return
  scopesBegin:
    - meta.statement
    - meta.command
  scopes:
    - meta.statement.command.name
    - entity.name.command
    - keyword.control.return
- source: '0'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.decimal
  scopesEnd:
    - meta.statement
    - meta.command
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: )
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
